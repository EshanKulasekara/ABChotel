generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  clerkId     String?   @unique // Clerk user ID, if using Clerk for auth
  email       String?   @unique
  password    String?   // Not used if Clerk is managing auth
  firstName   String?
  lastName    String?
  phone       String?
  role        Role      @default(CUSTOMER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  reservations Reservation[]
  createdReservations Reservation[] @relation("CreatedByUser")
  refunds      Refund[]             @relation("RefundApprover")
  inquiries    Inquiry[]            @relation("InquiryAssignee")
  news         News[]               @relation("NewsCreator")
  auditLogs    AuditLog[]
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

model RoomCategory {
  id           Int       @id @default(autoincrement())
  name         String
  sizeSqft     Int
  bedType      BedType
  maxOccupancy Int
  special      String?
  basePrice    Decimal

  rooms        Room[]
  reservations Reservation[]
}

enum BedType {
  TWIN
  QUEEN
  KING
}

model Room {
  id             Int       @id @default(autoincrement())
  roomNumber     String    @unique
  roomCategoryId Int
  status         RoomStatus @default(ACTIVE)

  roomCategory   RoomCategory @relation(fields: [roomCategoryId], references: [id])
  reservationRooms ReservationRoom[]
}

enum RoomStatus {
  ACTIVE
  MAINTENANCE
  BLOCKED
}

model MealPlan {
  id             Int       @id @default(autoincrement())
  code           MealCode  @unique
  breakfast      Boolean   @default(false)
  lunch          Boolean   @default(false)
  dinner         Boolean   @default(false)
  pricePerPerson Decimal

  reservations   Reservation[]
}

enum MealCode {
  BB
  HB
  FB
}

model Reservation {
  id               Int       @id @default(autoincrement())
  customerId       Int?
  checkIn          DateTime
  checkOut         DateTime
  numAdults        Int
  numChildren      Int       @default(0)
  roomCategoryId   Int
  mealPlanId       Int?
  status           ReservationStatus @default(PENDING)
  totalAmount      Decimal
  currency         String    @default("LKR")
  paymentStatus    PaymentStatus @default(UNPAID)
  createdByUserId  Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  customer         User?        @relation(fields: [customerId], references: [id])
  createdBy        User?        @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  roomCategory     RoomCategory @relation(fields: [roomCategoryId], references: [id])
  mealPlan         MealPlan?    @relation(fields: [mealPlanId], references: [id])
  reservationRooms ReservationRoom[]
  payments         Payment[]
  feedbacks        Feedback[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  PARTIALLY_REFUNDED
  REFUNDED
}

model ReservationRoom {
  id            Int    @id @default(autoincrement())
  reservationId Int
  roomId        Int

  reservation   Reservation @relation(fields: [reservationId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
}

model Payment {
  id               Int       @id @default(autoincrement())
  reservationId    Int
  provider         PaymentProvider
  providerPaymentId String?
  amount           Decimal
  currency         String
  status           PaymentStatus
  createdAt        DateTime  @default(now())

  reservation      Reservation @relation(fields: [reservationId], references: [id])
  refunds          Refund[]
}

enum PaymentProvider {
  STRIPE
}

model Refund {
  id               Int       @id @default(autoincrement())
  paymentId        Int
  amount           Decimal
  reason           String?
  providerRefundId String?
  approvedById     Int?
  createdAt        DateTime  @default(now())

  payment          Payment @relation(fields: [paymentId], references: [id])
  approvedBy       User?   @relation("RefundApprover", fields: [approvedById], references: [id])
}

model Inquiry {
  id             Int       @id @default(autoincrement())
  name           String
  email          String
  phone          String?
  subject        String
  message        String
  status         InquiryStatus @default(OPEN)
  assigneeUserId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  assignee       User? @relation("InquiryAssignee", fields: [assigneeUserId], references: [id])
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Feedback {
  id            Int       @id @default(autoincrement())
  reservationId Int
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())

  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model News {
  id              Int       @id @default(autoincrement())
  title           String
  body            String
  isPublished     Boolean   @default(false)
  publishAt       DateTime?
  createdByUserId Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  createdBy       User? @relation("NewsCreator", fields: [createdByUserId], references: [id])
}

model AuditLog {
  id        Int       @id @default(autoincrement())
  userId    Int?
  action    String
  entityType String
  entityId  Int?
  metadata  Json?
  createdAt DateTime @default(now())

  user      User? @relation(fields: [userId], references: [id])
}

